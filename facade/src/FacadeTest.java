/**
 * @author yejh
 * @create 2019-07_30 11:22
 *
 * 外观模式(Facade Pattern)
 * 一、定义
 * 外部与一个子系统的通信必须通过一个统一的外观对象进行，为子系统中的一组接口提供一个一致的界面，
 * 外观模式定义了一个高层接口，这个接口使得这一子系统更加容易使用。
 * 外观模式又称为门面模式，它是一种对象结构型模式。
 *
 *二、角色
 * Facade（外观角色）
 * 在客户端可以调用它的方法，在外观角色中可以知道相关的（一个或者多个）子系统的功能和责任；
 * 在正常情况下，它将所有从客户端发来的请求委派到相应的子系统去，传递给相应的子系统对象处理。
 *
 * SubSystem（子系统角色）
 * 在软件系统中可以有一个或者多个子系统角色，每一个子系统可以不是一个单独的类，而是一个类的集合，它实现子系统的功能；
 * 每一个子系统都可以被客户端直接调用，或者被外观角色调用，它处理由外观类传过来的请求；
 * 子系统并不知道外观的存在，对于子系统而言，外观角色仅仅是另外一个客户端而已。
 *
 *
 * 三、分析
 * 外观模式的目的不是给予子系统添加新的功能接口，而是为了让外部减少与子系统内多个模块的交互，松散耦合
 * 外观模式的本质是：封装交互，简化调用。
 *
 *
 *
 *
 *

 */
public class FacadeTest {
}
