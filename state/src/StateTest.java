import vote.VoteManager;
import vote.Voter;

/**
 * @author yejh
 * @create 2019-07_26 12:15
 *
 * 状态模式
 * 一、定义
 * 允许一个对象在其内部状态改变时改变它的行为，对象看起来似乎修改了它的类。状态模式是一种对象行为型模式。
 *
 * 二、角色
 * 1、环境(Context)，也称上下文
 * 定义客户端所感兴趣的接口，并且保留一个具体状态类的实例。这个具体状态类的实例给出此环境对象的现有状态。
 *
 * 2、抽象状态(State)
 * 定义一个接口，用以封装环境（Context）对象的一个特定的状态所对应的行为。
 *
 * 3、具体状态(ConcreteState)
 * 每一个具体状态类都实现了环境（Context）的一个状态所对应的行为。
 *
 * 三、分析
 * 所谓对象的状态，通常指的就是对象实例的属性的值；
 * 而行为指的就是对象的功能，再具体点说，行为大多可以对应到方法上。
 *
 * 状态模式的功能就是分离状态的行为，通过维护状态的变化，来调用不同状态对应的不同功能。
 * 也就是说，状态和行为是相关联的，它们的关系可以描述为：状态决定行为。
 *
 * 由于状态是在运行期被改变的，因此行为也会在运行期根据状态的改变而改变。
 *
 * 四、优点
 * 1、封装了转换规则。
 * 2、枚举可能的状态，在枚举状态之前需要确定状态种类。
 * 3、将所有与某个状态有关的行为放到一个类中，并且可以方便地增加新的状态，只需要改变对象状态即可改变对象的行为。
 * 4、将状态转换逻辑以状态对象形式封装，避免出现某一个巨大的条件语句块。
 * 5、可以让多个环境对象共享一个状态对象，从而减少系统中对象的个数。
 *
 * 五、缺点
 * 1、状态模式的使用必然会增加系统类和对象的个数。
 * 2、状态模式的结构与实现都较为复杂，如果使用不当将导致程序结构和代码的混乱。
 * 3、状态模式对“开闭原则”的支持并不太好，对于可以切换状态的状态模式，增加新的状态类需要修改那些负责状态转换的源代码，
 * 否则无法切换到新增状态；而且修改某个状态类的行为也需修改对应类的源代码。
 *
 * 六、状态模式与策略模式的区别
 * 1、目的不同
 * 策略模式是对算法的封装，它把算法的责任和算法本身分割开，委派给不同的对象管理。
 * 策略模式通常把一个系列的算法封装到一系列的策略类里面，作为一个抽象策略类的子类。
 * 用一句话来说，就是“准备一组算法，并将每一个算法封装起来，使得它们可以互换”。
 *
 * 2、实现不同
 * 在策略模式中，应当由客户端自己决定在什么情况下使用什么具体策略角色。这也是策略模式的缺点之一，在一定程度上增加了客户端的使用难度。
 *
 * 3、行为不同
 * 状态模式的行为是平行性的，不可相互替换的；而策略模式的行为是平等性的，是可以相互替换的。
 */

/*使用状态模式设计一个在线投票系统
  要实现控制同一个用户只能投一票，
  如果一个用户反复投票，而且投票次数超过5次，则判定为恶意刷票，
  要取消该用户投票的资格，当然同时也要取消他所投的票；
  如果一个用户的投票次数超过8次，将进入黑名单，禁止再登录和使用系统。

　要使用状态模式实现，首先需要把投票过程的各种状态定义出来，根据以上描述大致分为四种状态：
  正常投票、反复投票、恶意刷票、进入黑名单。然后创建一个投票管理对象（相当于Context）。
 */


public class StateTest {
    public static void main(String[] args) throws Exception {
        VoteManager voteManager = new VoteManager("谁是世界上最帅的人");
        Voter voter1 = voteManager.newVoterInstance("捞昌");
        Voter voter2 = voteManager.newVoterInstance("张三");
        Voter voter3 = voteManager.newVoterInstance("李四");
        Voter voter4 = voteManager.newVoterInstance("王五");
        Voter voter5 = voteManager.newVoterInstance("赵柳");
        Voter voter6 = voteManager.newVoterInstance("菲⑦");
        Voter voter7 = voteManager.newVoterInstance("王八");
        voter1.vote("捞昌");
        voter2.vote("亨");
        voter3.vote("亨");
        voter4.vote("亨");
        voter5.vote("亨");
        voter6.vote("亨");
        voter7.vote("亨");

       /* voter1.vote("捞昌");
        voter1.vote("捞昌");
        voter1.vote("捞昌");
        voter1.vote("捞昌");
        voter1.vote("捞昌");
        voter1.vote("捞昌");
        voter1.vote("捞昌");
        voter1.vote("捞昌");
        voter1.vote("捞昌");*/

        System.out.println(voteManager);
    }
}
